student <- data.frame(Name=c(LETTERS[1:5]),
                      Age = c(23,22,21,25,20),
                      Maths_Marks=c(87,86,83,88,79),
                      Science_Marks=c(65,87,78,55,93))

View(student)

#Add a new column - Total Marks 
#Use $ to access data frame, creates new one if doesn't exist already
#In R, need to give reference of data frame plus variable

student$total_marks <- student$Maths_Marks + student$Science_Marks

#When execute, Env shows "5 obs of 5 variables", earlier 4 variables

View(student)

#Percentage of math marks, Round does rounding off of ouput

student$pct_maths <- round(100*student$Maths_Marks/student$total_marks)


#Drop or remove a column - Name

student1 <- student
#created relica
#Can keep what want, or delete what don't want

student1 <- student1[,c(2:6)]

#Second way, use minus sign to get rid of unwanted column

student1 <- student[,-1]

student1<-student

student2<- student[,"Name"]

student2<-student[,c("Name","Age")]

View(student2)

#To find names of columns, can store as vector, can change vector then to change column name 

names(student)
names_student <- names(student)
names(student) <- c("a","b","c","d", "e",)

View(student)

#Go back to original 

names(student) <- names_student

#Change third element of vector

vect1 <- seq(1,10, by=2)
vect1[3]<- 100

v_col <- names(student)
v_col[3] <- "New_maths"

#Do same thing in one step 

student3 <- student

names(student3) <- v_col

View(student3)

names(student3)[3]<- "New_Maths"

#TRANSFORMATION of Age

View(student)

student$exp_age=exp(student$Age)
student$log_age=log(student$Age)
student$inv_age=1/(student$Age)
student$sqrt_age=sqrt(student$Age)
student$sqr_age=(student$Age)*(student$Age)

View(student)

student$exp_age=exp(student$Age/mean(student$Age))


#Change type of column 

class(student$Name)

student$Name <- as.character(student$Name)

nn <- c("xx","23",25.4, "78.4")

class(nn)

nn.num <- as.numeric(nn)  #gives warning cz had characters and numeric can't store character
#rest all numeric so stored
nn.num

#counting the missing values use function is.na(), using aong with table() summarizes

table(is.na(nn.num))

################################ ROWS ######################################

View(student)

#Pick Students with Age greater than 23 

student$Age >= 23   #For more than 23, gives true. Basically converted to Logical automatically

#Need these rows, pass index before comma in []

s1 <- student$Age >= 23  #Logical vector

student4 <- student[s1,]

View(student4)

#If want age <23   - NOR OPERATOR 

student4 <- student[!s1,]

#AND CONDITION, directly in [], not creating separate vector
student5 <- student[student$Science_Marks>80 & student$Maths_Marks>80,]

View(student5)

#Row & Column Selection Together 

student5 <- student[student$Science_Marks>80 & student$Maths_Marks>80,
                    c(1:5)]

View(student5)

#Validation of Model

?sample

sample_index<-sample(1:nrow(student),3,replace=F)

#Feed this in  [] to get rows 

student6 <- student[sample_index,]

View(student6)


#Assorting Columns (All transformations of age will come together) 

student10 <- student[, c(1,3,4,5,6,2,7,8,9,10,11)]

#Handling missing observations 

dt_missing <- data.frame(age=c(12,34,56,67,NA, 45,78,NA),
                         Income=c(1,2,3,4, NA,6,NA,NA))

dt_missing$age_missing <- is.na(dt_missing$age)
dt_missing$income_missing <- is.na(dt_missing$Income)

dt_missing_non <- dt_missing[(dt_missing$age_missing | dt_missing$income_missing),]



View(dt_missing)
